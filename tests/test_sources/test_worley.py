"""
test_worley
~~~~~~~~~~~

Unit tests for :mod:`pjimg.sources.worley`.
"""
import numpy as np
import pytest as pt

import pjimg.sources.worley as w
from tests.common import mkhex


class TestWorley:
    # Tests for Worley initialization.
    def test_init_all_default(self):
        """Given only required parameters, :class:`Worley` should
        initialize the required attributes with the given values. It
        should then initialize the optional attributes with default
        values.
        """
        required = {
            'points': 10,
        }
        optional = {
            'volume': None,
            'origin': (0, 0, 0),
            'seed': None,
        }
        obj = w.Worley(**required)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    def test_init_all_optional(self):
        """Given optional parameters, :class:`Worley` should
        initialize the given attributes with the given values.
        """
        required = {
            'points': 10,
        }
        optional = {
            'volume': (1, 3, 4),
            'origin': (4, 4, 4),
            'seed': 'spam',
        }
        obj = w.Worley(**required, **optional)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    # Tests for fill.
    def test_fill(self):
        """Given origin, dimensions, and a color, :meth:`Worley.fill`
        should return a volume filled with a box of the origin,
        dimensions, and color given when the object was created.
        """
        obj = w.Worley(points=6, volume=None, seed='spam')
        result = obj.fill((3, 12, 8))
        assert (mkhex(result) == np.array([
            [
                [0x39, 0x28, 0x39, 0x5a, 0x7f, 0xa6, 0xcd, 0xf5],
                [0x28, 0x00, 0x28, 0x50, 0x78, 0xa1, 0xc9, 0xe7],
                [0x00, 0x28, 0x39, 0x5a, 0x7f, 0xa6, 0xb8, 0xc5],
                [0x28, 0x39, 0x5a, 0x72, 0x91, 0x91, 0x96, 0xa6],
                [0x39, 0x45, 0x62, 0x85, 0x78, 0x72, 0x78, 0x8b],
                [0x5a, 0x62, 0x78, 0x78, 0x62, 0x5a, 0x62, 0x78],
                [0x7f, 0x85, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0xa6, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xcd, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0xd1, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0xcd, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xd1, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
            ],
            [
                [0x45, 0x39, 0x45, 0x62, 0x85, 0xab, 0xd1, 0xf8],
                [0x39, 0x28, 0x39, 0x5a, 0x7f, 0xa6, 0xcd, 0xdc],
                [0x28, 0x39, 0x45, 0x62, 0x85, 0xa6, 0xab, 0xb8],
                [0x00, 0x28, 0x50, 0x78, 0x85, 0x7f, 0x85, 0x96],
                [0x28, 0x39, 0x5a, 0x78, 0x62, 0x5a, 0x62, 0x78],
                [0x50, 0x5a, 0x72, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0x78, 0x7f, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xa1, 0xa1, 0x78, 0x50, 0x28, 0x00, 0x28, 0x50],
                [0xc9, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xcd, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xc9, 0xa1, 0x78, 0x50, 0x28, 0x00, 0x28, 0x50],
                [0xcd, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
            ],
            [
                [0x62, 0x5a, 0x62, 0x78, 0x96, 0xb8, 0xdc, 0xff],
                [0x5a, 0x50, 0x5a, 0x72, 0x91, 0xb4, 0xcd, 0xd9],
                [0x39, 0x45, 0x62, 0x78, 0x96, 0xa1, 0xa6, 0xb4],
                [0x28, 0x39, 0x5a, 0x7f, 0x7f, 0x78, 0x7f, 0x91],
                [0x39, 0x45, 0x62, 0x72, 0x5a, 0x50, 0x5a, 0x72],
                [0x5a, 0x62, 0x78, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0x7f, 0x85, 0x78, 0x50, 0x28, 0x00, 0x28, 0x50],
                [0xa6, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xcd, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0xd1, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
                [0xcd, 0xa6, 0x7f, 0x5a, 0x39, 0x28, 0x39, 0x5a],
                [0xd1, 0xab, 0x85, 0x62, 0x45, 0x39, 0x45, 0x62],
            ],
        ], dtype=np.uint8)).all()


class TestWorleyCell:
    # Tests for Worley initialization.
    def test_init_all_default(self):
        """Given only required parameters, :class:`Worley` should
        initialize the required attributes with the given values. It
        should then initialize the optional attributes with default
        values.
        """
        required = {
            'points': 10,
        }
        optional = {
            'volume': None,
            'origin': (0, 0, 0),
            'seed': None,
        }
        obj = w.WorleyCell(**required)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    def test_init_all_optional(self):
        """Given optional parameters, :class:`Worley` should
        initialize the given attributes with the given values.
        """
        required = {
            'points': 10,
        }
        optional = {
            'volume': (1, 3, 4),
            'origin': (4, 4, 4),
            'seed': 'spam',
        }
        obj = w.WorleyCell(**required, **optional)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    # Tests for fill.
    def test_fill(self):
        """Given origin, dimensions, and a color, :meth:`Worley.fill`
        should return a volume filled with a box of the origin,
        dimensions, and color given when the object was created.
        """
        obj = w.WorleyCell(points=5, volume=None, seed='spam')
        result = obj.fill((3, 12, 8))
        assert (mkhex(result) == np.array([
            [
                [0xcc, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xb0],
                [0xdf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xae, 0x97],
                [0xff, 0xdf, 0xcc, 0xc6, 0xc4, 0xaa, 0x8e, 0x7f],
                [0x9f, 0x9f, 0x7f, 0x94, 0xa3, 0x83, 0x7f, 0x7f],
                [0x67, 0x6f, 0x7b, 0x5a, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x56, 0x5b, 0x65, 0x77, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x4f, 0x52, 0x63, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x4b, 0x54, 0x67, 0x6f, 0x77, 0x7a, 0x77, 0x6f],
                [0x2b, 0x2b, 0x27, 0x22, 0x1c, 0x19, 0x1c, 0x22],
                [0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0xcf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbe, 0xa6],
                [0xdf, 0xc7, 0xbf, 0xbf, 0xbf, 0xbe, 0xa2, 0x8c],
                [0x9f, 0x7f, 0x9f, 0xac, 0xb2, 0x9b, 0x80, 0x7f],
                [0x3f, 0x59, 0x62, 0x7f, 0x91, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x3f, 0x56, 0x64, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x3f, 0x50, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x40, 0x6d, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x5b, 0x7a, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x2c, 0x38, 0x37, 0x34, 0x32, 0x30, 0x32, 0x34],
                [0x0b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0xd3, 0xc6, 0xbf, 0xbf, 0xbf, 0xbf, 0xb2, 0x9c],
                [0x7f, 0x9c, 0xb0, 0xb9, 0xbd, 0xb0, 0x96, 0x81],
                [0x67, 0x5f, 0x7f, 0x93, 0xab, 0x8c, 0x7f, 0x7f],
                [0x3f, 0x3f, 0x4e, 0x6c, 0x7e, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x3f, 0x3f, 0x6f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x3f, 0x5a, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x3f, 0x49, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x40, 0x63, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
                [0x56, 0x46, 0x48, 0x4a, 0x4d, 0x4e, 0x4d, 0x4a],
                [0x17, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)).all()


class TestOctaveWorley:
    # Tests for Worley initialization.
    def test_init_all_default(self):
        """Given only required parameters, :class:`OctaveWorley` should
        initialize the required attributes with the given values. It
        should then initialize the optional attributes with default
        values.
        """
        required = {}
        optional = {
            'octaves': 4,
            'persistence': 8,
            'amplitude': 8,
            'frequency': 2,
            'points': 10,
            'volume': None,
            'origin': (0, 0, 0),
            'seed': None,
        }
        obj = w.OctaveWorley(**required)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    def test_init_all_optional(self):
        """Given optional parameters, :class:`OctaveWorley` should
        initialize the given attributes with the given values.
        """
        required = {}
        optional = {
            'octaves': 3,
            'persistence': 10,
            'amplitude': 9,
            'frequency': 4,
            'points': 8,
            'volume': (1, 3, 4),
            'origin': (4, 4, 4),
            'seed': 'spam',
        }
        obj = w.OctaveWorley(**required, **optional)
        for attr in required:
            assert getattr(obj, attr) == required[attr]
        for attr in optional:
            assert getattr(obj, attr) == optional[attr]

    # Tests for fill.
    def test_fill(self):
        """Given origin, dimensions, and a color, :meth:`Worley.fill`
        should return a volume filled with a box of the origin,
        dimensions, and color given when the object was created.
        """
        obj = w.OctaveWorley(points=6, volume=None, seed='spam')
        result = obj.fill((1, 8, 8))
        assert (mkhex(result) == np.array([
            [
                [0x96, 0x18, 0xa0, 0x36, 0xca, 0xb9, 0xbd, 0x9e],
                [0x00, 0x00, 0x96, 0x30, 0x6c, 0x30, 0x51, 0x08],
                [0x00, 0x96, 0x58, 0x36, 0x22, 0x18, 0x4e, 0x00],
                [0x18, 0x1b, 0x5d, 0x26, 0x18, 0x00, 0x18, 0x4e],
                [0x99, 0x08, 0x4e, 0x51, 0x08, 0x00, 0x00, 0x08],
                [0x08, 0x00, 0x00, 0x4e, 0x4e, 0x00, 0x08, 0x1b],
                [0x0b, 0x96, 0x96, 0x51, 0x08, 0x00, 0x18, 0x9e],
                [0xa0, 0xd9, 0xae, 0x22, 0x0b, 0x18, 0x99, 0x12],
            ],
        ], dtype=np.uint8)).all()
