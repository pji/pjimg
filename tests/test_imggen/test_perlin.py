"""
test_perlin
~~~~~~~~~~~

Unit tests for :mod:`pjimg.imggen.perlin`.
"""
import numpy as np

from pjimg.imggen import perlin as p
from tests.common import mkhex


# Tests for OctavePerlin.
def test_OctavePerlin_fill():
    """Given a volume of image data to fill, :meth:`OctavePerlin.fill`
    should return that volume filled with Perlin noise.
    """
    perlin = p.OctavePerlin(seed='eggs')
    result = perlin.fill((3, 12, 8))
    assert (mkhex(result) == np.array([
        [
            [0x7f, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x83, 0x84],
            [0x7c, 0x7c, 0x7d, 0x7e, 0x80, 0x81, 0x82, 0x83],
            [0x79, 0x7a, 0x7a, 0x7c, 0x7d, 0x7f, 0x80, 0x81],
            [0x77, 0x77, 0x78, 0x79, 0x7b, 0x7c, 0x7e, 0x7f],
            [0x75, 0x75, 0x75, 0x76, 0x78, 0x79, 0x7b, 0x7d],
            [0x74, 0x74, 0x73, 0x74, 0x75, 0x76, 0x78, 0x7a],
            [0x73, 0x73, 0x72, 0x72, 0x73, 0x74, 0x76, 0x77],
            [0x73, 0x72, 0x71, 0x71, 0x71, 0x72, 0x74, 0x75],
            [0x72, 0x71, 0x70, 0x70, 0x70, 0x71, 0x72, 0x74],
            [0x71, 0x70, 0x6f, 0x6f, 0x6f, 0x70, 0x71, 0x73],
            [0x70, 0x6f, 0x6e, 0x6e, 0x6e, 0x70, 0x71, 0x72],
            [0x6f, 0x6e, 0x6d, 0x6d, 0x6e, 0x6f, 0x70, 0x72],
        ],
        [
            [0x82, 0x82, 0x82, 0x83, 0x84, 0x85, 0x85, 0x86],
            [0x7f, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85],
            [0x7c, 0x7c, 0x7d, 0x7e, 0x80, 0x81, 0x82, 0x83],
            [0x79, 0x79, 0x7a, 0x7b, 0x7d, 0x7e, 0x80, 0x81],
            [0x77, 0x77, 0x77, 0x78, 0x7a, 0x7b, 0x7d, 0x7f],
            [0x76, 0x75, 0x75, 0x76, 0x77, 0x78, 0x7a, 0x7c],
            [0x74, 0x74, 0x73, 0x73, 0x74, 0x76, 0x78, 0x79],
            [0x73, 0x72, 0x72, 0x72, 0x73, 0x74, 0x76, 0x78],
            [0x72, 0x71, 0x70, 0x70, 0x71, 0x73, 0x74, 0x76],
            [0x71, 0x70, 0x6f, 0x6f, 0x70, 0x72, 0x73, 0x75],
            [0x70, 0x6f, 0x6e, 0x6e, 0x6f, 0x71, 0x72, 0x74],
            [0x6f, 0x6e, 0x6d, 0x6e, 0x6e, 0x70, 0x71, 0x73],
        ],
        [
            [0x84, 0x84, 0x84, 0x85, 0x86, 0x87, 0x87, 0x87],
            [0x81, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87],
            [0x7e, 0x7e, 0x7f, 0x80, 0x82, 0x83, 0x84, 0x85],
            [0x7b, 0x7b, 0x7c, 0x7d, 0x7f, 0x80, 0x82, 0x83],
            [0x79, 0x78, 0x79, 0x7a, 0x7c, 0x7d, 0x7f, 0x81],
            [0x77, 0x76, 0x76, 0x77, 0x79, 0x7a, 0x7c, 0x7e],
            [0x75, 0x74, 0x74, 0x75, 0x76, 0x78, 0x7a, 0x7c],
            [0x74, 0x73, 0x73, 0x73, 0x74, 0x76, 0x78, 0x7a],
            [0x73, 0x72, 0x71, 0x72, 0x73, 0x74, 0x76, 0x78],
            [0x72, 0x71, 0x70, 0x70, 0x72, 0x73, 0x75, 0x77],
            [0x71, 0x70, 0x6f, 0x6f, 0x70, 0x72, 0x74, 0x75],
            [0x70, 0x6f, 0x6e, 0x6e, 0x6f, 0x71, 0x73, 0x74],
        ],
    ], dtype=np.uint8)).all()


# Tests for Perlin.
def test_Perlin_fill():
    """Given a volume of image data to fill, :meth:`Perlin.fill`
    should return that volume filled with Perlin noise.
    """
    perlin = p.Perlin(unit=(4, 4, 4), seed='eggs')
    result = perlin.fill((3, 12, 10))
    assert (mkhex(result) == np.array([
        [
            [0x7f, 0x89, 0x9f, 0x9c, 0x7f, 0x62, 0x5f, 0x75, 0x7f, 0x75],
            [0x62, 0x6d, 0x93, 0xa5, 0x92, 0x74, 0x62, 0x67, 0x6c, 0x67],
            [0x5f, 0x59, 0x6f, 0x85, 0x7f, 0x71, 0x6f, 0x7a, 0x7f, 0x7a],
            [0x75, 0x5c, 0x57, 0x67, 0x6c, 0x6d, 0x7c, 0x8d, 0x92, 0x8d],
            [0x7f, 0x62, 0x5f, 0x75, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],
            [0x75, 0x60, 0x71, 0x98, 0xa5, 0x9c, 0x7c, 0x5e, 0x59, 0x63],
            [0x5f, 0x5b, 0x7f, 0xb0, 0xbf, 0xad, 0x6f, 0x3e, 0x3f, 0x5b],
            [0x62, 0x66, 0x81, 0x9e, 0xa5, 0x95, 0x62, 0x47, 0x59, 0x7a],
            [0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x75, 0x5f, 0x62, 0x7f, 0x9c],
            [0x92, 0x90, 0x7c, 0x62, 0x59, 0x54, 0x5c, 0x80, 0xa5, 0xbd],
            [0x7f, 0x8c, 0x7f, 0x59, 0x3f, 0x34, 0x4f, 0x90, 0xbf, 0xda],
            [0x6c, 0x8d, 0x9c, 0x7d, 0x59, 0x3d, 0x43, 0x78, 0xa5, 0xc9],
        ],
        [
            [0x92, 0x9a, 0xaa, 0xa3, 0x89, 0x6c, 0x5e, 0x66, 0x6c, 0x64],
            [0x6f, 0x7a, 0x9e, 0xaf, 0x9e, 0x80, 0x64, 0x5d, 0x5f, 0x5b],
            [0x57, 0x57, 0x78, 0x96, 0x92, 0x82, 0x7a, 0x7f, 0x84, 0x80],
            [0x5a, 0x4d, 0x60, 0x81, 0x87, 0x84, 0x8f, 0xa1, 0xa9, 0xa4],
            [0x62, 0x53, 0x69, 0x91, 0x9c, 0x98, 0x95, 0x98, 0x9c, 0x9a],
            [0x5f, 0x55, 0x78, 0xac, 0xba, 0xaf, 0x8e, 0x74, 0x72, 0x7a],
            [0x51, 0x51, 0x78, 0xaa, 0xb8, 0xa9, 0x75, 0x4c, 0x4e, 0x65],
            [0x56, 0x58, 0x6a, 0x80, 0x89, 0x7f, 0x5e, 0x4c, 0x5b, 0x79],
            [0x6c, 0x6a, 0x64, 0x60, 0x62, 0x60, 0x5b, 0x66, 0x7f, 0x98],
            [0x7c, 0x79, 0x64, 0x4c, 0x46, 0x48, 0x5d, 0x86, 0xa6, 0xba],
            [0x71, 0x7c, 0x72, 0x52, 0x3d, 0x37, 0x59, 0x9a, 0xc4, 0xd9],
            [0x65, 0x84, 0x96, 0x80, 0x60, 0x49, 0x52, 0x85, 0xae, 0xcb],
        ],
        [
            [0x7f, 0x87, 0x9f, 0xaa, 0x9f, 0x8d, 0x7f, 0x7d, 0x7f, 0x75],
            [0x5a, 0x68, 0x96, 0xb7, 0xb2, 0x9c, 0x7f, 0x70, 0x70, 0x6d],
            [0x3f, 0x4e, 0x7f, 0xa3, 0x9f, 0x8c, 0x7f, 0x84, 0x8f, 0x94],
            [0x4a, 0x56, 0x7b, 0x94, 0x8c, 0x7d, 0x7f, 0x99, 0xae, 0xb8],
            [0x5f, 0x6b, 0x8f, 0xa7, 0x9f, 0x8c, 0x7f, 0x8c, 0x9f, 0xac],
            [0x71, 0x7c, 0x9f, 0xb9, 0xb5, 0x9e, 0x7a, 0x6b, 0x75, 0x85],
            [0x7f, 0x82, 0x8f, 0x9c, 0x9f, 0x94, 0x6f, 0x50, 0x4f, 0x5f],
            [0x81, 0x7b, 0x6b, 0x66, 0x70, 0x78, 0x71, 0x60, 0x5c, 0x63],
            [0x7f, 0x77, 0x5f, 0x54, 0x5f, 0x71, 0x7f, 0x81, 0x7f, 0x7d],
            [0x7c, 0x76, 0x61, 0x54, 0x5c, 0x6f, 0x8d, 0xa3, 0xa9, 0xa1],
            [0x6f, 0x75, 0x6f, 0x63, 0x5f, 0x68, 0x8f, 0xbc, 0xcf, 0xc9],
            [0x62, 0x76, 0x8a, 0x89, 0x7c, 0x73, 0x84, 0xaa, 0xc2, 0xc7],
        ],
    ], dtype=np.uint8)).all()
